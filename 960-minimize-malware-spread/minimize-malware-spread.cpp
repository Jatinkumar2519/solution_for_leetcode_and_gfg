class Solution {
public:
    class DSU {
    public:
        int* parent;
        int* rank;
        DSU(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                rank[i] = 0;
                parent[i] = i;
            }
        }
        int find(int num) {
            if (parent[num] == num)
                return num;
            return parent[num] = find(parent[num]);
        }
        void Union(int n1, int n2) {
            int p1 = find(n1);
            int p2 = find(n2);
            if (p1 == p2)
                return;
            if (rank[p1] > rank[p2]) {
                parent[p2] = p1;
            } else if (rank[p1] < rank[p2]) {
                parent[p1] = p2;
            } else {
                rank[p1]++;
                parent[p2] = p1;
            }
        }
    };
    int minimizeMalwareSpread(int n, vector<vector<int>>& graph, int m,vector<int>& infected) {
        DSU dsu(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j])
                    dsu.Union(i, j);
            }
        }
        unordered_map<int, int> sizes;
        for (int i = 0; i < n; i++) {
            sizes[dsu.find(i)]++;
        }
        unordered_map<int, int> numberOfinfected;
        for (int i : infected) {
            numberOfinfected[dsu.find(i)]++;
        }
        int node = -1, maxsaved = -1;
        for (int inf : infected) {
            int root = dsu.find(inf);
            if (numberOfinfected[root] == 1) {
                if (maxsaved < sizes[root]) {
                    maxsaved = sizes[root];
                    node = inf;
                } else if (maxsaved == sizes[root] && inf < node) {
                    maxsaved = sizes[root];
                    node = inf;
                }
            }
        }
        if (node == -1) {
            return *min_element(infected.begin(), infected.end());
        }
        return node;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        return minimizeMalwareSpread(graph.size(),graph,initial.size(),initial);
    }
};